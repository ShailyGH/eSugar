package rocks.zipcode.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BloodGlucoseAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodGlucoseAllPropertiesEquals(BloodGlucose expected, BloodGlucose actual) {
        assertBloodGlucoseAutoGeneratedPropertiesEquals(expected, actual);
        assertBloodGlucoseAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodGlucoseAllUpdatablePropertiesEquals(BloodGlucose expected, BloodGlucose actual) {
        assertBloodGlucoseUpdatableFieldsEquals(expected, actual);
        assertBloodGlucoseUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodGlucoseAutoGeneratedPropertiesEquals(BloodGlucose expected, BloodGlucose actual) {
        assertThat(expected)
            .as("Verify BloodGlucose auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodGlucoseUpdatableFieldsEquals(BloodGlucose expected, BloodGlucose actual) {
        assertThat(expected)
            .as("Verify BloodGlucose relevant properties")
            .satisfies(e -> assertThat(e.getMeasurement()).as("check measurement").isEqualTo(actual.getMeasurement()))
            .satisfies(e -> assertThat(e.getMeasurementContent()).as("check measurementContent").isEqualTo(actual.getMeasurementContent()))
            .satisfies(e -> assertThat(e.getMeasurementType()).as("check measurementType").isEqualTo(actual.getMeasurementType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBloodGlucoseUpdatableRelationshipsEquals(BloodGlucose expected, BloodGlucose actual) {
        assertThat(expected)
            .as("Verify BloodGlucose relationships")
            .satisfies(e -> assertThat(e.getUserProfile()).as("check userProfile").isEqualTo(actual.getUserProfile()));
    }
}
