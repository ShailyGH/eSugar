package rocks.zipcode.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class UserAccountAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountAllPropertiesEquals(UserAccount expected, UserAccount actual) {
        assertUserAccountAutoGeneratedPropertiesEquals(expected, actual);
        assertUserAccountAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountAllUpdatablePropertiesEquals(UserAccount expected, UserAccount actual) {
        assertUserAccountUpdatableFieldsEquals(expected, actual);
        assertUserAccountUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountAutoGeneratedPropertiesEquals(UserAccount expected, UserAccount actual) {
        assertThat(expected)
            .as("Verify UserAccount auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountUpdatableFieldsEquals(UserAccount expected, UserAccount actual) {
        assertThat(expected)
            .as("Verify UserAccount relevant properties")
            .satisfies(e -> assertThat(e.getLoginName()).as("check loginName").isEqualTo(actual.getLoginName()))
            .satisfies(e -> assertThat(e.getPassword()).as("check password").isEqualTo(actual.getPassword()))
            .satisfies(e -> assertThat(e.getStreetAddress()).as("check streetAddress").isEqualTo(actual.getStreetAddress()))
            .satisfies(e -> assertThat(e.getCity()).as("check city").isEqualTo(actual.getCity()))
            .satisfies(e -> assertThat(e.getState()).as("check state").isEqualTo(actual.getState()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getZipcode()).as("check zipcode").isEqualTo(actual.getZipcode()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getIsActive()).as("check isActive").isEqualTo(actual.getIsActive()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertUserAccountUpdatableRelationshipsEquals(UserAccount expected, UserAccount actual) {}
}
