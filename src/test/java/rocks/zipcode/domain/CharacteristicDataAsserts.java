package rocks.zipcode.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CharacteristicDataAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCharacteristicDataAllPropertiesEquals(CharacteristicData expected, CharacteristicData actual) {
        assertCharacteristicDataAutoGeneratedPropertiesEquals(expected, actual);
        assertCharacteristicDataAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCharacteristicDataAllUpdatablePropertiesEquals(CharacteristicData expected, CharacteristicData actual) {
        assertCharacteristicDataUpdatableFieldsEquals(expected, actual);
        assertCharacteristicDataUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCharacteristicDataAutoGeneratedPropertiesEquals(CharacteristicData expected, CharacteristicData actual) {
        assertThat(expected)
            .as("Verify CharacteristicData auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCharacteristicDataUpdatableFieldsEquals(CharacteristicData expected, CharacteristicData actual) {
        assertThat(expected)
            .as("Verify CharacteristicData relevant properties")
            .satisfies(e -> assertThat(e.getDateOfBirth()).as("check dateOfBirth").isEqualTo(actual.getDateOfBirth()))
            .satisfies(e -> assertThat(e.getGender()).as("check gender").isEqualTo(actual.getGender()))
            .satisfies(e -> assertThat(e.getBloodType()).as("check bloodType").isEqualTo(actual.getBloodType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCharacteristicDataUpdatableRelationshipsEquals(CharacteristicData expected, CharacteristicData actual) {
        assertThat(expected)
            .as("Verify CharacteristicData relationships")
            .satisfies(e -> assertThat(e.getUserProfile()).as("check userProfile").isEqualTo(actual.getUserProfile()));
    }
}
