package rocks.zipcode.domain;

import static org.assertj.core.api.Assertions.assertThat;
import static rocks.zipcode.domain.AssertUtils.zonedDataTimeSameInstant;

public class ActivityLogAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityLogAllPropertiesEquals(ActivityLog expected, ActivityLog actual) {
        assertActivityLogAutoGeneratedPropertiesEquals(expected, actual);
        assertActivityLogAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityLogAllUpdatablePropertiesEquals(ActivityLog expected, ActivityLog actual) {
        assertActivityLogUpdatableFieldsEquals(expected, actual);
        assertActivityLogUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityLogAutoGeneratedPropertiesEquals(ActivityLog expected, ActivityLog actual) {
        assertThat(expected)
            .as("Verify ActivityLog auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityLogUpdatableFieldsEquals(ActivityLog expected, ActivityLog actual) {
        assertThat(expected)
            .as("Verify ActivityLog relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getStartDateTime())
                        .as("check startDateTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getStartDateTime())
            )
            .satisfies(
                e ->
                    assertThat(e.getEndDateTime())
                        .as("check endDateTime")
                        .usingComparator(zonedDataTimeSameInstant)
                        .isEqualTo(actual.getEndDateTime())
            )
            .satisfies(e -> assertThat(e.getDistanceCovered()).as("check distanceCovered").isEqualTo(actual.getDistanceCovered()))
            .satisfies(e -> assertThat(e.getStepsCount()).as("check stepsCount").isEqualTo(actual.getStepsCount()))
            .satisfies(e -> assertThat(e.getCaloriesBurnt()).as("check caloriesBurnt").isEqualTo(actual.getCaloriesBurnt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertActivityLogUpdatableRelationshipsEquals(ActivityLog expected, ActivityLog actual) {
        assertThat(expected)
            .as("Verify ActivityLog relationships")
            .satisfies(e -> assertThat(e.getUserProfile()).as("check userProfile").isEqualTo(actual.getUserProfile()));
    }
}
