package rocks.zipcode.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class BodyHeightAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBodyHeightAllPropertiesEquals(BodyHeight expected, BodyHeight actual) {
        assertBodyHeightAutoGeneratedPropertiesEquals(expected, actual);
        assertBodyHeightAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBodyHeightAllUpdatablePropertiesEquals(BodyHeight expected, BodyHeight actual) {
        assertBodyHeightUpdatableFieldsEquals(expected, actual);
        assertBodyHeightUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBodyHeightAutoGeneratedPropertiesEquals(BodyHeight expected, BodyHeight actual) {
        assertThat(expected)
            .as("Verify BodyHeight auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBodyHeightUpdatableFieldsEquals(BodyHeight expected, BodyHeight actual) {
        assertThat(expected)
            .as("Verify BodyHeight relevant properties")
            .satisfies(e -> assertThat(e.getHeight()).as("check height").isEqualTo(actual.getHeight()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertBodyHeightUpdatableRelationshipsEquals(BodyHeight expected, BodyHeight actual) {
        assertThat(expected)
            .as("Verify BodyHeight relationships")
            .satisfies(e -> assertThat(e.getUserProfile()).as("check userProfile").isEqualTo(actual.getUserProfile()));
    }
}
